I"\B<h4 id="nodejs-和-npm-的关系">Node.js 和 NPM 的关系</h4>

<h5 id="npm-是什么">NPM 是什么</h5>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">NPM</code>全称 <code class="language-plaintext highlighter-rouge">Node Package Manager</code>包管理工具;类似<code class="language-plaintext highlighter-rouge">pod</code>、<code class="language-plaintext highlighter-rouge">maven</code>、<code class="language-plaintext highlighter-rouge">gradle</code>;只不过<code class="language-plaintext highlighter-rouge">pod</code>是用来管理<code class="language-plaintext highlighter-rouge">iOS</code>三方库安装包,<code class="language-plaintext highlighter-rouge">maven</code>、<code class="language-plaintext highlighter-rouge">gradle</code>是用来管理<code class="language-plaintext highlighter-rouge">java jar</code>包的,而<code class="language-plaintext highlighter-rouge">npm</code>是用来管理<code class="language-plaintext highlighter-rouge">js</code>的。</p>
</blockquote>

<h5 id="nodejs-是什么">Node.js 是什么</h5>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Node.js</code>是一个<code class="language-plaintext highlighter-rouge">Javascript</code>运行环境(<code class="language-plaintext highlighter-rouge">runtime environment</code>),不是一个<code class="language-plaintext highlighter-rouge">js</code>文件,实质是对<code class="language-plaintext highlighter-rouge">Chrome V8</code>引擎进行了封装.<code class="language-plaintext highlighter-rouge">Node.js</code>是一个让<code class="language-plaintext highlighter-rouge">JavaScript</code>运行在服务端的开发平台,它让 <code class="language-plaintext highlighter-rouge">JavaScript</code>成为与<code class="language-plaintext highlighter-rouge">PHP</code>、<code class="language-plaintext highlighter-rouge">Python</code>等服务端语言平起平坐的脚本语言.</p>
</blockquote>

<h5 id="nodejs-和-npm-的发展">Node.js 和 NPM 的发展</h5>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">NPM</code>作者已经将<code class="language-plaintext highlighter-rouge">NPM</code>开发完成,于是发邮件通知<code class="language-plaintext highlighter-rouge">jQuery</code>、<code class="language-plaintext highlighter-rouge">Bootstrap</code>、<code class="language-plaintext highlighter-rouge">Underscore</code>作者,希望他们把<code class="language-plaintext highlighter-rouge">jquery、bootstrap 、underscore </code>放到<code class="language-plaintext highlighter-rouge">NPM</code>远程仓库,但是没有收到回应,于是<code class="language-plaintext highlighter-rouge">npm</code>的发展遇到了瓶颈.
<code class="language-plaintext highlighter-rouge">Node.js</code>作者也将<code class="language-plaintext highlighter-rouge">Node.js</code>开发完成,但是<code class="language-plaintext highlighter-rouge">Node.js</code>缺少一个包管理器,于是他和<code class="language-plaintext highlighter-rouge">NPM</code> 的作者一拍即合、抱团取暖,最终<code class="language-plaintext highlighter-rouge">Node.js</code>内置了<code class="language-plaintext highlighter-rouge">NPM</code>.
后来的事情大家都知道,<code class="language-plaintext highlighter-rouge">Node.js</code>火了.随着<code class="language-plaintext highlighter-rouge">Node.js</code>的火爆,大家开始用<code class="language-plaintext highlighter-rouge">NPM</code>来共享<code class="language-plaintext highlighter-rouge">JS</code> 代码了,于是<code class="language-plaintext highlighter-rouge">jQuery</code>作者也将<code class="language-plaintext highlighter-rouge">jQuery</code>发布到<code class="language-plaintext highlighter-rouge">NPM</code>了.所以现在,你可以使用<code class="language-plaintext highlighter-rouge">npm install jquery</code>来下载<code class="language-plaintext highlighter-rouge">jQuery</code> 代码.现在用<code class="language-plaintext highlighter-rouge">NPM</code>来分享代码已经成了前端的标配.</p>
</blockquote>

<h4 id="npm-包管理器的常用命令">NPM 包管理器的常用命令</h4>

<p><strong>1.首先是安装命令</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> //全局安装
 npm install 模块名 -g

 //本地安装
 npm install 模块名

 //一次性安装多个
 npm install 模块1 模块2 模块3 

 //安装开发时依赖包
 npm install 模块名 --save-dev

 //安装运行时依赖包
 npm install 模块名 --save

 //查看一个模块的所有信息
 npm view 模块名

 //查看模块的远程仓库当前版本号
 npm view 模块名 version

 //查看当前项目中应用的某个模块的版本号的命令为
 npm list 模块名 version

 //查看模块的历史版本和当前版本
 npm view 模块名 versions
</code></pre></div></div>
<p><strong>2.查看安装的目录</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> //查看项目中模块所在的目录
 npm root

 //查看全局安装的模块所在目录
 npm root -g
</code></pre></div></div>
<p><strong>3.查看npm的所有命令命令</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm help
</code></pre></div></div>
<p><strong>4.查看某个包的各种属性</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> //查看某个包对于各种包的依赖关系
 npm view 模块名 dependencies
</code></pre></div></div>
<p><strong>5.查看包的源文件地址</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> //查看包的源文件地址
 npm view 模块名 repository.url
</code></pre></div></div>
<p><strong>6.查看当前模块依赖的node最低版本号</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm view 模块名 engines
</code></pre></div></div>

<p><strong>7.查看npm使用的所有文件夹</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm help folders
</code></pre></div></div>
<p><strong>8.用于更改包内容后进行重建</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm rebuild 模块名
</code></pre></div></div>
<p><strong>9.检查包是否已经过时</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> //此命令会列出所有已经过时的包，可以及时进行包的更新
 npm outdated
</code></pre></div></div>
<p><strong>10.更新node模块</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm update 模块名

 //当然你也可以update 该模块到指定版本
 npm update 模块名 @版本号

 //如果安装到最新版本可以使用以下命令
 npm install 模块名@latest 
 
 //如果当前的版本号为2.5.1，是没办法进行npm update 模块名 @2.3.1 将模块版本号变为2.3.1的，当然，你可以先uninstall，然后进行install @2.3.1
</code></pre></div></div>
<p><strong>11.卸载node模块</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm uninstall 模块名
</code></pre></div></div>
<p><strong>12.访问package.json的字段文档</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm help json
</code></pre></div></div>
<p><strong>13.发布一个npm包的时候,需要检验某个包名是否已经存在</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm search 模块名
</code></pre></div></div>
<p><strong>14.创建与清除</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> //引导你创建一个package.json文件，包括名称、版本、作者这些信息
 npm init

 //清除npm的缓存
 npm cache clean
</code></pre></div></div>

<p><strong>15.查看包的安装路径</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> //当前包安装路径
 npm root 

 //查看全局的包的安装路径
 npm root -g 
</code></pre></div></div>
<p><strong>16.查看npm的版本</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm -v
</code></pre></div></div>
<p><strong>17.打开某个模块的仓库界面</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm repo 模块名
 //例如运行npm repo vue则会打开vue线上仓库

 //打开某个模块的文档
 npm docs 模块名
 //例如运行npm docs vue则会打开vue的readme.md文档

 //打开某个模块的主页
 npm home 模块名
 //例如运行npm home vue则会打开vue模块的主页

 //查看当前已经安装的模块
 npm list

 //当然我们也可以限制输入的模块层级，例如
 npm list --depth=0

 //清除未被使用到的模块
 //有时在我们使用npm list的时候，可能会碰到一些问题，就是有些模块并没有被项目引用使用，我们还是安装了这些模块，那么我们可以一键清除这些没有使用到的模块
 npm prune

 //例如运行npm bugs chai则会打开vue仓库的issue
 npm bugs 模块名
</code></pre></div></div>
<p><strong>18.扫描、修复有安全问题的版本</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> // 扫描审查
 npm audit
 // 修复
 npm audit  fix
 npm audit fix --force
</code></pre></div></div>

<h5 id="版本控制">版本控制</h5>

<blockquote>
  <p>我们使用<code class="language-plaintext highlighter-rouge">node</code>开发时,开发环境和线上环境的版本不一致可能导致某一些<code class="language-plaintext highlighter-rouge">bug</code>.</p>
</blockquote>

<blockquote>
  <p>首先看<code class="language-plaintext highlighter-rouge">npm</code>包的版本号的格式<code class="language-plaintext highlighter-rouge">X.Y.Z</code>,版本好的格式遵循<code class="language-plaintext highlighter-rouge">semver 2.0</code>规范,其中<code class="language-plaintext highlighter-rouge">X</code>为主版本号,只有更新了不向下兼容的<code class="language-plaintext highlighter-rouge">API</code>时进行修改主版本号,<code class="language-plaintext highlighter-rouge">Y</code>为次版本号,当模块增加了向下兼容的功能时进行修改,<code class="language-plaintext highlighter-rouge">Z</code>为修订版本号,当模块进行了向下兼容的<code class="language-plaintext highlighter-rouge">bug</code>修改后进行修改,这就是<code class="language-plaintext highlighter-rouge">语义化的版本控制</code>.</p>
</blockquote>

<blockquote>
  <p>默认情况下,当用<code class="language-plaintext highlighter-rouge">--save</code>或者<code class="language-plaintext highlighter-rouge">--save-dev</code>安装一个模块时,<code class="language-plaintext highlighter-rouge">npm</code>通过脱字符<code class="language-plaintext highlighter-rouge">^</code>来限定所安装模块的主版本号,而该脱字符对于不同的版本号有不同的更新机制:</p>
</blockquote>

<blockquote>
  <p>^1.2.1 代表的更新版本范围为 &gt;=1.2.1 &amp;&amp; &lt; 2.0.0<br />
^0.2.1 代表的更新版本范围为 &gt;=0.2.1 &amp;&amp; &lt; 0.3.0<br />
^0.0.2 代表的更新版本范围为 0.0.2（相当于锁定为了0.0.2版本）</p>
</blockquote>

<p><strong>1.当然我们也可以把项目依赖的包固定在某一个版本,强制大家安装相同的依赖树,如下所示:</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm install react --save -E
 //此命令会将react的版本号进行固定，但是该方式只能控制项目中直接依赖的包的版本，无法控制项目模块中依赖的包的版本号，所以这种方式也无法让不同的使用者得到相同的依赖树。
</code></pre></div></div>
<p><strong>2.此外我们还可以使用npm shrinkwrap,可以将项目中的模块版本进行精确锁定:</strong></p>

<p>这时候只需要运行命令<code class="language-plaintext highlighter-rouge">npm shrinkwrap</code>,便会产生一个<code class="language-plaintext highlighter-rouge">npm-shrinkwrap.json</code>文件,这个文件保存了所有当前使用的依赖模块的版本:把该文件提交到<code class="language-plaintext highlighter-rouge">git</code>仓库中,这样其他人在<code class="language-plaintext highlighter-rouge">clone</code>你的项目的时候,执行<code class="language-plaintext highlighter-rouge">npm install</code>命令时,<code class="language-plaintext highlighter-rouge">npm</code>检测到该文件中的信息会完整的还原出完全相同的依赖树，具体的使用方法如下：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install --save-dev react //安装react
npm prune    //清除未被使用的模块
npm shrinkwrap
但是使用这种方法，安装一个模块包的方式比较繁琐。
</code></pre></div></div>
<p><strong>3.使用yarn我们也可以得到模块包精确控制的结果</strong></p>

<p><code class="language-plaintext highlighter-rouge">yarn</code>是一个与<code class="language-plaintext highlighter-rouge">npm</code>兼容的<code class="language-plaintext highlighter-rouge">node</code>包管理器,使用它安装<code class="language-plaintext highlighter-rouge">npm</code>包,会自动在项目目录创建一个<code class="language-plaintext highlighter-rouge">yarn.lock</code>文件,该文件包含了当前项目中所安装的依赖包的版本信息,其他人在使用<code class="language-plaintext highlighter-rouge">yarn</code>安装项目的依赖包时就可以通过该文件创建一个完全相同的依赖环境.使用方法如下:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> yarn init  //使用yarn创建一个项目
 yarn add 模块名  //使用yarn 安装一个包
 //还有很多yarn命令
</code></pre></div></div>
<p>此外<code class="language-plaintext highlighter-rouge">yarn</code>除了可以自动帮我们锁定依赖包的版本,<code class="language-plaintext highlighter-rouge">yarn</code>还在本地缓存已经安装过的包,当再次安装时,直接从本地读取即可.安装速度得到大大提升.但<code class="language-plaintext highlighter-rouge">yarn</code>的使用需要整个团队都去使用,还是有一定的成本的.</p>

<p>综上所述,目前大多数项目中较为简单的使用规范,在项目中依赖各个模块时,对于主版本号和次版本号都为0的不稳定的项目,我们可以使用精确版本<code class="language-plaintext highlighter-rouge">（exact）</code>,对于主版本号为0次版本号不为0的模块和主版本号不为0的模块，使用<code class="language-plaintext highlighter-rouge">caret Range</code>即脱字符<code class="language-plaintext highlighter-rouge">(^)</code>来控制版本.当然,我们也可以对项目依赖模块的版本进行精确锁定.</p>

<p><strong>SemVer(Semantic Versioning) 2.0.0</strong></p>
<blockquote>
  <p>SemVer是一个对npm包版本进行规范的模块，它对于npm包的版本号有着一系列的规则，以下为摘抄自SemVer 2.0.0中的规则：</p>
  <ol>
    <li>在版本控制环节我们已经说过了，模块的版本号采用X.Y.Z的格式，且都必须为非负的正整数，依次为主版本号、次版本号，修改版本号。</li>
    <li>当规定版本的模块进行发布之后，对于该模块的任何修改，都必须发布新版本。</li>
    <li>主版本号为0.X.Y的模块处于开发阶段，模块并不稳定。</li>
    <li>主版本号在有不向下兼容的API发布时必须修改，在主版本号递增时，次版本号和修订版本号必须重新归零。</li>
    <li>次版本号再有向下兼容的API发布时进行递增修改，在模块中有API被弃用时也必须递增次版本号，当此版本号递增改变时，修订版本号Z必须归零。</li>
    <li>版本的优先级就是各个版本的排序规则，判断版本优先级时，必须把版本号从左至右分为主版本号、此版本号、修订版本号、以及先行版本号来进行比较</li>
  </ol>
</blockquote>
:ET