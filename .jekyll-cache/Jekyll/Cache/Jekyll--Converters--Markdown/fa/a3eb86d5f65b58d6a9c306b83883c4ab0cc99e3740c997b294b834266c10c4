I"|<h4 id="前言">前言</h4>

<p>项目使用<code class="language-plaintext highlighter-rouge">git</code>管理版本的时候没有配置忽略文件<code class="language-plaintext highlighter-rouge">.gitignore</code>文件,就会导致每次提交的时候都会出现<code class="language-plaintext highlighter-rouge">UserInterfaceState.xcuserstate</code>(视图修改缓存文件),<code class="language-plaintext highlighter-rouge">Breakpoints_v2.xcbkptlist</code>(断点调试缓存文件)这两个文件被修改.</p>

<h4 id="解决方案">解决方案</h4>

<p>1、创建<code class="language-plaintext highlighter-rouge">.gitignore</code>文件<br />
2、将下列代码复制到该文件</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Xcode
#
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
*.DS_Store
*.xcscheme

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# http://guides.cocoapods.org/using/using-cocoapods.html#should-i-ignore-the-pods-directory-in-source-control
#
# Pods/
</code></pre></div></div>
<p>3、执行代码提交的操作</p>

<h4 id="注意">注意</h4>

<p>如果上面的操作没能成功忽略掉<code class="language-plaintext highlighter-rouge">.gitignore</code>中的文件,原因是<code class="language-plaintext highlighter-rouge">.gitignore</code>只能忽略那些原来没有被<code class="language-plaintext highlighter-rouge">track</code>的文件,如果某些文件已经被纳入了版本管理中,则修改<code class="language-plaintext highlighter-rouge">.gitignore</code>是无效的.</p>

<p>需要继续执行下面的操作：</p>

<p>先把本地缓存删除(改变成未<code class="language-plaintext highlighter-rouge">track</code>状态),一般删除项目中全部缓存,然后再提交.命令行操作如下:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git rm -r --cached .
git add .
git commit -m ‘update .gitignore’
</code></pre></div></div>

<h4 id="语法规范">语法规范</h4>

<ul>
  <li>空行或是以<code class="language-plaintext highlighter-rouge">#</code>开头的行即注释行将被忽略;</li>
  <li>可以在前面添加正斜杠<code class="language-plaintext highlighter-rouge">/</code>来避免递归,下面的例子中可以很明白的看出来与下一条的区别;</li>
  <li>可以在后面添加正斜杠<code class="language-plaintext highlighter-rouge">/</code>来忽略文件夹,例如<code class="language-plaintext highlighter-rouge">build/</code>即忽略<code class="language-plaintext highlighter-rouge">build</code>文件夹;</li>
  <li>可以使用<code class="language-plaintext highlighter-rouge">!</code>来否定忽略,即比如在前面用了<code class="language-plaintext highlighter-rouge">*.ipa</code>,然后使用<code class="language-plaintext highlighter-rouge">!a.ipa</code>,则这个<code class="language-plaintext highlighter-rouge">a.ipa</code>不会被忽略;</li>
  <li><code class="language-plaintext highlighter-rouge">*</code>用来匹配零个或多个字符,如<code class="language-plaintext highlighter-rouge">*.[oa]</code>忽略所有以<code class="language-plaintext highlighter-rouge">.o</code>或<code class="language-plaintext highlighter-rouge">.a</code>结尾;</li>
  <li><code class="language-plaintext highlighter-rouge">*~</code>忽略所有以<code class="language-plaintext highlighter-rouge">~</code>结尾的文件(这种文件通常被许多编辑器标记为临时文件);</li>
  <li><code class="language-plaintext highlighter-rouge">[]</code>用来匹配括号内的任一字符,如<code class="language-plaintext highlighter-rouge">[abc]</code>,也可以在括号内加连接符,如<code class="language-plaintext highlighter-rouge">[0-9]</code>匹配0至9的数;</li>
  <li><code class="language-plaintext highlighter-rouge">?</code>用来匹配单个字符.</li>
</ul>

<p>举栗:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 忽略 .a 文件
*.a
# 但否定忽略 lib.a, 尽管已经在前面忽略了 .a 文件
!lib.a
# 仅在当前目录下忽略 TODO 文件， 但不包括子目录下的 subdir/TODO
/TODO
# 忽略 build/ 文件夹下的所有文件
build/
# 忽略 doc/notes.txt, 不包括 doc/server/arch.txt
doc/*.txt
# 忽略所有的 .pdf 文件 在 doc/ directory 下的
doc/**/*.pdf
</code></pre></div></div>

:ET